        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include "main.h"
        -:    3:
        -:    4:#define max 3;
        -:    5:#define search(array, target) \
        -:    6:    ({ \
        -:    7:    __label__ found; \
        -:    8:    int value; \
        -:    9:    int i, j;  \
        -:   10:    typeof (target) _SEARCH_target = (target); \
        -:   11:    typeof (*(array)) *_SEARCH_array = (array); \
        -:   12:    for(i=0; i<3; i++) \
        -:   13:    { \
        -:   14:        for(j=0; j<3; j++) \
        -:   15:        { \
        -:   16:            if(_SEARCH_array[i][j]==_SEARCH_target) \
        -:   17:            { \
        -:   18:                value =_SEARCH_target; \
        -:   19:                goto found; \
        -:   20:            } \
        -:   21:        }; \
        -:   22:    }; \
        -:   23:    value=29; \
        -:   24:    found: value; })
        -:   25:
        -:   26:void func_nest()
        -:   27:{
        -:   28:    // void print_nest()
        -:   29:    // {
        2:   30:    printf("In func_nest()\n");
        -:   31:    // }
        -:   32:    // print_nest();
        1:   33:}
        -:   34:
        -:   35:struct MY_STRUCT
        -:   36:{
        -:   37:    char c1;
        -:   38:    char c2;
        -:   39:    char c_array[5];
        -:   40:};
        -:   41:
        -:   42:int function1(char *string, int num)
        -:   43:{
    #####:   44:    printf("function1 is %s\n", string);
    #####:   45:    return num + 1;
        -:   46:}
        -:   47:int function2(char *string, int num)
        -:   48:{
        -:   49:    void *arg_list;
        -:   50:    void *return_value;
        -:   51:
        -:   52:    // arg_list = __builtin_apply_args();
        -:   53:
        1:   54:    return 0;
        -:   55:}
        -:   56:int compute_example()
        -:   57:{
        2:   58:    int a = function2("", 0);
        1:   59:    printf("I am compute exmaple : %s\n", __FUNCTION__);
        1:   60:    return 0;
        -:   61:}
        -:   62:int main()
        -:   63:{
        -:   64:    __label__ something, otherthing;
        1:   65:    int array[3][3] = {
        -:   66:        {1, 2, 3},
        -:   67:        {4, 5, 6},
        -:   68:        {7, 8, 9}};
       45:   69:    int target = search(array, 8);
        1:   70:    int i = 0;
        1:   71:    int test_a_arr[5] = {[0] = 10, [2] = 12};
        -:   72:
        1:   73:    printf("Found %d\n", target);
        1:   74:    printf("file:%s, function:%s, line:%d\n", __FILE__, __FUNCTION__, __LINE__);
        -:   75:
        1:   76:    func_nest();
        -:   77:
        -:   78:    struct MY_STRUCT myStru;
        -:   79:
        1:   80:    myStru.c1 = 1;
        1:   81:    myStru.c2 = 2;
        -:   82:
       12:   83:    for (i = 0; i < 5; i++)
        -:   84:    {
        -:   85:        // int temp = i;
        5:   86:        myStru.c_array[i] = i;
        5:   87:    }
        -:   88:
        1:   89:    debug("Error:%d\n", 99999);
        -:   90:
       12:   91:    for (i = 0; i < sizeof(test_a_arr) / sizeof(int); i++)
        -:   92:    {
        5:   93:        printf("%d ", test_a_arr[i]);
        5:   94:    }
        1:   95:    printf("\n");
        1:   96:    debug("size of int:%lu\n", sizeof(int));
        -:   97:
        1:   98:    compute_example();
        -:   99:
        1:  100:    goto otherthing;
        -:  101:something:
    #####:  102:    printf("hello gnuc\n");
    #####:  103:    return 0;
        -:  104:otherthing:
        1:  105:    printf("hello otherthing\n");
        1:  106:    return 0;
        1:  107:}
